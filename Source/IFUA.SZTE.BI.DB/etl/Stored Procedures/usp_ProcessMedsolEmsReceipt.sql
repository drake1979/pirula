

-- =============================================
-- Author:		pabronits
-- Create date: 2022.07.05
-- Description:	Medsol EMS Excel feldolgozás
--				SCD 1
-- =============================================
CREATE PROCEDURE [etl].[usp_ProcessMedsolEmsReceipt]
	
	@ETLSESSIONID BIGINT

WITH RECOMPILE 
AS
	SET NOCOUNT ON; 
	SET XACT_ABORT ON;  

	DECLARE @ELAPSED NVARCHAR(50)
	DECLARE @START_WATCH DATETIME2 = GETDATE()
	
	DECLARE @ERROR_MSG NVARCHAR(MAX)

	DECLARE @HSTPRODUCTMEDSOL AS TABLE
	(
		[RowId] [int] IDENTITY(1,1) NOT NULL,
		[ProductMedsolKey] [int] NULL,
		[ProductTTTID] [nvarchar](9) NULL,
		[ProductMedsolName] [nvarchar](256) NULL,
		[PrescriptionUnit] [nvarchar](256) NULL,
		[MaxPrescriptionDate] date null,
		[MinPrescriptionDate] date null,
		[RowHash] [binary](32) NULL,
		[ImportFileId] [bigint] NULL,
		[ETLSessionID] [bigint] NULL,
		[ActionType] [varchar](20) NULL
	)
		
	DECLARE @PRESCRIPTION AS TABLE
	(
		[RowId] [int] IDENTITY(1,1) NOT NULL,
		[MedsolEmsReceiptRowId] INT NOT NULL,
		[PrescriptionIDValue] VARCHAR(500) NOT NULL,
		[PrescriptionID] BIGINT NULL
	)
	DECLARE @TMPPRODUCT AS TABLE
	(	
		[ProductTTTID] [nvarchar](9) NULL,
		[ProductMedsolName] [nvarchar](256) NULL,
		[PrescriptionUnit] [nvarchar](256) NULL,
		[MaxPrescriptionDate] date null,
		[MinPrescriptionDate] date null,				
		[RowHashProduct] binary(32) NULL,
		[ImportFileId] [bigint] NULL,
		[DuplicateRank] INT NULL
	)

	DECLARE @NULLHASH BINARY(32) = (SELECT  [etl].[udf_GetHash_01] ( NULL))

	BEGIN TRY

	/**
	Statikus javító script dedikált EMS azonosítókra
	**/
	update [landing].[MedsolEmsReceipt] 
	set 
		[Landing_Felíró orvos] = '39131'
	where
		[Landing_eMS recept az.] in
		(
			'8360321', '8360322',	'8360325',	'8360327',	'8360410',	'8360507',	'8360542',	'8360543',	'8360555',	'8360590',	'8360601',	'8360623',	'8360641',	'8360684',	'8360686',	'8360711',	'8360715',	'8360735',	'8360736',	'8360768',	'8360789',	'8360790',	'8360865',	'8360942',	'8360948',	'8360949',	'8361049',	'8361068',	'8361095',	'8361116',	'8361118',	'8361119',	'8361150',	'8361154',	'8361184',	'8361185',	'8361194',	'8361195',	'8361196',	'8361231',	'8361242',	'8361246',	'8361291',	'8361295',	'8361329',	'8361356',	'8361360',	'8361362',	'8361372',	'8361402',	'8361473',	'8361474',	'8361489',	'8361491',	'8361494',	'8361496',	'8361617',	'8361621',	'8361648',	'8361653',	'8361670',	'8361675',	'8361679',	'8361682',	'8367432',	'8367434',	'8368027',	'8368030',	'8368036',	'8369601',	'8369602',	'8369628',	'8369630',	'8369672',	'8369693',	'8369695',	'8369719',	'8369773',	'8369775',	'8369804',	'8369806',	'8369823',	'8369827',	'8369851',	'8369853',	'8369879',	'8369895',	'8369898',	'8369912',	'8369916',	'8369933',	'8369944',	'8369957',	'8369969',	'8370085',	'8370091',	'8370114',	'8370124',	'8370143',	'8370149',	'8370163',	'8370182',	'8370222',	'8370223',	'8370236',	'8370301',	'8370334',	'8370352',	'8370380',	'8370416',	'8370420',	'8370429',	'8370467',	'8370520',	'8370718',	'8370731',	'8370761',	'8370778',	'8370789',	'8370804',	'8370871',	'8370873',	'8370877',	'8370880',	'8370882',	'8370891',	'8370893',	'8370926',	'8371003',	'8371027',	'8371057',	'8371065',	'8371066',	'8371073',	'8371081',	'8371084',	'8371105',	'8371107',	'8371133',	'8371141',	'8371144',	'8371148',	'8371172',	'8371181',	'8371192',	'8371207',	'8371208',	'8371222',	'8371233',	'8371276',	'8371278',	'8374491',	'8375350',	'8375869',	'8377012',	'8377013',	'8377445',	'8377449',	'8377572',	'8377573',	'8377574',	'8377608',	'8377632',	'8377665',	'8377726',	'8377757',	'8377761',	'8377776',	'8377805',	'8378316',	'8378318',	'8378352',	'8378356',	'8378372',	'8378392',	'8378409',	'8378446',	'8379140',	'8379141',	'8379148',	'8379150',	'8379155',	'8379157',	'8379160',	'8379184',	'8379196',	'8379199',	'8379276',	'8379279',	'8379326',	'8379338',	'8379339',	'8379350',	'8379352',	'8379373',	'8379444',	'8379446',	'8379449',	'8379470',	'8379771',	'8379803',	'8379805',	'8379831',	'8379832',	'8379873',	'8379883',	'8379891',	'8379900',	'8379903',	'8379987',	'8380033',	'8380035',	'8380053',	'8380070',	'8380088',	'8380093',	'8380144',	'8380146',	'8380158',	'8380169',	'8380172',	'8380184',	'8380186',	'8380209',	'8380235',	'8380289',	'8380293',	'8380307',	'8380312',	'8380314',	'8380341',	'8380349',	'8380384',	'8380386',	'8380389',	'8380403',	'8380470',	'8380497',	'8380500',	'8380540',	'8380562',	'8380567',	'8380578',	'8380600',	'8380630',	'8380655',	'8380660',	'8380688',	'8380691',	'8380694',	'8380707',	'8380709',	'8380711',	'8380717',	'8380725',	'8381321',	'8381323',	'8381327',	'8381330',	'8381334',	'8381429',	'8381430',	'8381439',	'8382429',	'8383165',	'8383166',	'8383167',	'8383168',	'8383169',	'8386722',	'8386723',	'8386724',	'8388318',	'8388320',	'8388383',	'8388384',	'8388422',	'8388495',	'8388519',	'8388615',	'8388629',	'8389066',	'8389070',	'8389105',	'8389139',	'8389174',	'8389182',	'8389191',	'8389202',	'8389207',	'8389213',	'8389274',	'8389277',	'8389424',	'8389427',	'8389429',	'8389444',	'8389449',	'8389454',	'8389469',	'8389471',	'8389475',	'8389515',	'8389539',	'8389624',	'8389627',	'8389630',	'8389678',	'8389702',	'8389704',	'8389749',	'8389804',	'8389806',	'8389859',	'8389860',	'8389878',	'8389884',	'8389885',	'8389895',	'8389898',	'8389903',	'8389906',	'8389909',	'8389911',	'8389912',	'8389913',	'8393455',	'8393457',	'8394953',	'8394954',	'8396662',	'8396663',	'8397049',	'8397050',	'8397063',	'8397068',	'8397186',	'8397204',	'8397212',	'8397213',	'8397215',	'8397225',	'8397290',	'8397319',	'8397358',	'8397391',	'8397392',	'8397485',	'8397488',	'8397510',	'8397513',	'8397582',	'8397599',	'8397603',	'8397649',	'8397685',	'8397700',	'8397701',	'8397712',	'8397725',	'8397727',	'8397732',	'8397764',	'8397767',	'8397769',	'8397772',	'8397775',	'8397787',	'8397837',	'8397840',	'8397858',	'8397918',	'8397941',	'8397943',	'8397977',	'8397978',	'8397989',	'8397993',	'8398019',	'8398020',	'8398048',	'8398054',	'8398080',	'8398085',	'8398104',	'8398106',	'8398109',	'8398131',	'8398132',	'8398148',	'8398155',	'8398243',	'8398259',	'8398263',	'8398265',	'8398266',	'8398294',	'8398296',	'8398328',	'8398329',	'8398344',	'8398348',	'8398355',	'8398383',	'8398395',	'8398427',	'8398428',	'8398432',	'8398475',	'8398485',	'8398536',	'8398538',	'8398540',	'8398545',	'8398546',	'8398547',	'8398553',	'8398557',	'8398563',	'8398585',	'8399030',	'8399033',	'8399040',	'8399045',	'8399052',	'8399096',	'8399104',	'8399113',	'8399129',	'8400679',	'8400681',	'8400918',	'8403032',	'8403046',	'8403054',	'8404237',	'8404248',	'8404251',	'8405313',	'8405588',	'8406394',	'8406460',	'8406462',	'8406684',	'8406687',	'8406689',	'8406758',	'8406774',	'8406795',	'8406847',	'8406851',	'8406880',	'8406897',	'8406910',	'8407041',	'8407045',	'8407067',	'8407206',	'8407219',	'8407274',	'8407279',	'8407304',	'8407309',	'8407327',	'8407436',	'8407439',	'8407486',	'8407490',	'8407542',	'8407545',	'8407574',	'8407577',	'8407671',	'8407688',	'8407692',	'8407693',	'8407697',	'8407716',	'8407751',	'8407783',	'8407786',	'8407787',	'8407819',	'8407825',	'8407871',	'8407920',	'8407937',	'8407940',	'8407952',	'8407982',	'8407985',	'8408015',	'8408018',	'8408027',	'8408053',	'8408057',	'8408074',	'8408075',	'8408115',	'8408116',	'8408126',	'8408139',	'8411228',	'8411231',	'8411739',	'8411743',	'8412038',	'8412064',	'8412073',	'8412657',	'8413980',	'8413985',	'8413988',	'8414200',	'8414204',	'8414205',	'8414271',	'8414274',	'8415404',	'8415408',	'8416469',	'8416471',	'8416482',	'8416515',	'8416517',	'8416539',	'8416541',	'8416557',	'8416561',	'8416564',	'8416597',	'8416598',	'8416611',	'8416627',	'8416688',	'8416693',	'8416739',	'8416741',	'8416850',	'8416857',	'8416883',	'8416885',	'8416901',	'8416904',	'8416951',	'8416953',	'8416956',	'8417000',	'8417003',	'8417017',	'8417030',	'8417158',	'8417161',	'8417250',	'8417253',	'8417299',	'8417300',	'8417303',	'8417305',	'8417329',	'8417410',	'8417472',	'8417476',	'8417517',	'8417518',	'8417547',	'8417591',	'8417593',	'8417600',	'8417601',	'8417608',	'8417684',	'8417690',	'8417712',	'8417728',	'8417769',	'8417788',	'8417790',	'8417839',	'8417841',	'8417846',	'8418336',	'8418343',	'8418344',	'8421497',	'8421502',	'8424084',	'8424086',	'8424103',	'8424106',	'8424118',	'8424122',	'8426487',	'8426492',	'8426495',	'8426529',	'8426531',	'8426781',	'8426784',	'8426794',	'8426802',	'8426817',	'8426828',	'8426829',	'8426843',	'8426871',	'8426873',	'8426886',	'8426896',	'8426979',	'8426991',	'8426993',	'8427012',	'8427085',	'8427089',	'8427176',	'8427189',	'8427191',	'8427391',	'8427393',	'8427401',	'8427436',	'8427471',	'8427480',	'8427481',	'8427525',	'8427541',	'8427696',	'8427775',	'8427799',	'8427800',	'8427840',	'8427849',	'8427851',	'8427857',	'8427883',	'8427886',	'8427901',	'8427914',	'8427915',	'8427928',	'8427933',	'8427938',	'8427939',	'8427972',	'8427975',	'8427981',	'8427982',	'8428012',	'8428023',	'8428054',	'8428058',	'8428097',	'8428114',	'8428116',	'8428126',	'8428127',	'8428133',	'8428142',	'8428146',	'8428161',	'8428163',	'8428184',	'8428185',	'8428202',	'8428205',	'8428209',	'8429068',	'8430885',	'8430887',	'8431722',	'8431725',	'8433788',	'8433851',	'8433853',	'8433859',	'8433861',	'8433863',	'8433881',	'8436907',	'8436911',	'8436937',	'8436964',	'8436966',	'8436969',	'8437027',	'8437035',	'8437062',	'8437089',	'8437232',	'8437234',	'8437258',	'8437358',	'8437360',	'8437374',	'8437412',	'8437432',	'8437440',	'8437468',	'8437486',	'8437495',	'8437497',	'8437528',	'8437567',	'8437594',	'8437611',	'8437633',	'8437712',	'8437723',	'8437733',	'8437745',	'8437771',	'8437797',	'8437798',	'8437808',	'8437816',	'8437820',	'8438071',	'8438083',	'8438401',	'8440153',	'8440990',	'8441007',	'8441011',	'8441034',	'8444170',	'8444172',	'8444181',	'8444184',	'8444193',	'8444201',	'8445045',	'8445048',	'8445082',	'8445182',	'8445290',	'8445299',	'8445365',	'8445367',	'8445411',	'8445416',	'8445519',	'8445521',	'8445538',	'8445578',	'8445580',	'8445635',	'8445670',	'8445675',	'8445726',	'8445730',	'8445777',	'8445827',	'8445977',	'8446011',	'8446017',	'8446057',	'8446058',	'8446132',	'8446182',	'8446223',	'8446224',	'8446227',	'8446228',	'8446275',	'8446288',	'8446289',	'8446295',	'8446296',	'8446298',	'8446332',	'8446354',	'8447014',	'8447015',	'8447117',	'8447200',	'8447221',	'8447450',	'8447559',	'8447566',	'8447637',	'8447639',	'8447720',	'8447727',	'8447749',	'8447827',	'8447859',	'8447881',	'8447921',	'8447956',	'8447994',	'8448056',	'8448058',	'8448103',	'8448104',	'8448197',	'8448200',	'8448221',	'8448225',	'8448275',	'8448318',	'8448338',	'8448362',	'8448406',	'8448417',	'8448423',	'8448431',	'8448435',	'8448440',	'8448446',	'8448466',	'8448471',	'8448483',	'8448490',	'8448516',	'8448521',	'8448566',	'8448611',	'8448644',	'8448647',	'8448662',	'8448700',	'8448702',	'8448716',	'8448723',	'8448726',	'8448755',	'8448801',	'8448810',	'8448812',	'8448826',	'8448839',	'8448845',	'8448847',	'8448853',	'8449962',	'8449964',	'8453922',	'8454134',	'8454138',	'8454142',	'8456337',	'8456345',	'8456402',	'8456463',	'8456468',	'8456587',	'8456588',	'8456636',	'8456642',	'8456657',	'8456669',	'8456670',	'8456684',	'8457995',	'8460170',	'8460172',	'8460195',	'8460204',	'8460212',	'8460216',	'8460259',	'8460260',	'8460263',	'8460278',	'8461650',	'8463898',	'8463899',	'8463929',	'8463930',	'8463931',	'8463934',	'8463993',	'8464095',	'8464097',	'8464098',	'8464150',	'8464152',	'8464164',	'8464180',	'8464182',	'8464188',	'8464197',	'8464255',	'8464385',	'8464407',	'8464448',	'8464449',	'8464457',	'8464461',	'8464516',	'8464517',	'8464604',	'8464606',	'8464612',	'8464786',	'8464787',	'8465880',	'8465884',	'8465900',	'8465909',	'8465956',	'8465960',	'8466011',	'8466025',	'8466027',	'8466034',	'8466035',	'8466117',	'8466135',	'8466194',	'8466205',	'8466261',	'8466279',	'8466345',	'8466348',	'8466381',	'8466386',	'8466402',	'8466429',	'8466431',	'8466435',	'8466549',	'8466665',	'8466734',	'8466743',	'8466752',	'8466753',	'8466767',	'8466769',	'8466812',	'8466826',	'8466830',	'8466833',	'8466873',	'8466892',	'8466929',	'8466960',	'8466969',	'8466970',	'8466972',	'8467002',	'8467004',	'8467046',	'8467047',	'8467052',	'8467073',	'8467096',	'8467122',	'8467127',	'8467129',	'8467140',	'8467142',	'8467145',	'8467151',	'8467153',	'8467155',	'8467175',	'8467177',	'8467183',	'8467193',	'8467215',	'8467983',	'8471427',	'8472117',	'8472128',	'8472146',	'8473577',	'8473597',	'8485575',	'8488304',	'8488310',	'8488317',	'8488322',	'8488323',	'8488329',	'8488334',	'8488335',	'8488346',	'8488351',	'8488355',	'8488357',	'8488359',	'8488379',	'8488383',	'8490800',	'8490924',	'8490925',	'8490942',	'8491062',	'8491092',	'8491099',	'8491100',	'8491112',	'8491117',	'8491132',	'8491135',	'8491152',	'8491167',	'8491195',	'8491212',	'8491214',	'8491225',	'8491231',	'8491234',	'8491268',	'8491272',	'8491275',	'8491279',	'8491282',	'8491310',	'8491318',	'8491336',	'8491337',	'8491340',	'8491353',	'8491375',	'8491416',	'8491421',	'8491561',	'8491563',	'8491585',	'8491612',	'8491615',	'8491632',	'8491647',	'8491659',	'8491725',	'8491735',	'8491775',	'8491807',	'8491810',	'8491812',	'8491829',	'8491858',	'8491862',	'8491894',	'8491896',	'8491928',	'8492044',	'8492046',	'8492049',	'8492113',	'8492115',	'8492119',	'8492124',	'8492162',	'8492193',	'8492197',	'8492243',	'8492246',	'8492405',	'8492412',	'8492424',	'8492430',	'8492436',	'8492437',	'8492445',	'8492468',	'8492469',	'8492474',	'8492500',	'8497777',	'8497782',	'8497802',	'8497804',	'8500808',	'8500829',	'8501557',	'8503343',	'8504649',	'8504669',	'8505996',	'8505999',	'8506001',	'8506604',	'8506607',	'8506611',	'8507654',	'8507656',	'8507693',	'8507697',	'8507790',	'8507854',	'8508174',	'8508175',	'8509921',	'8509943',	'8509945',	'8509946',	'8510001',	'8510011',	'8510035',	'8510037',	'8510072',	'8510080',	'8510081',	'8510082',	'8510091',	'8510093',	'8510102',	'8510169',	'8510213',	'8510215',	'8510432',	'8510436',	'8510494',	'8510497',	'8510500',	'8510781',	'8510803',	'8510910',	'8510930',	'8510935',	'8510941',	'8510950',	'8510991',	'8510992',	'8510994',	'8511000',	'8511044',	'8511050',	'8511096',	'8511109',	'8511126',	'8511132',	'8511139',	'8511141',	'8511145',	'8511186',	'8511192',	'8511208',	'8511263',	'8511301',	'8511302',	'8511320',	'8511327',	'8511341',	'8511342',	'8511354',	'8511358',	'8511366',	'8511368',	'8511374',	'8511375',	'8511379',	'8511381',	'8511385',	'8511388',	'8511390',	'8511406',	'8511418',	'8511419',	'8511426',	'8511429',	'8511430',	'8511431',	'8511432',	'8511435',	'8515658',	'8516133',	'8516806',	'8516807',	'8516809',	'8516810',	'8516868',	'8516892',	'8516908',	'8517057',	'8517292',	'8517335',	'8517336',	'8517382',	'8517576',	'8517578',	'8517591',	'8517592',	'8517596',	'8517611',	'8517614',	'8518855',	'8518856',	'8518923',	'8519985',	'8519986',	'8519987',	'8519988',	'8519989',	'8519990',	'8522882',	'8522898',	'8525112',	'8527540',	'8527591',	'8527592',	'8527618',	'8527620',	'8527671',	'8527704',	'8527712',	'8527777',	'8527780',	'8527794',	'8527800',	'8527842',	'8527843',	'8527856',	'8527866',	'8527890',	'8527892',	'8527942',	'8527958',	'8527961',	'8527962',	'8527980',	'8527984',	'8527988',	'8527990',	'8528018',	'8528019',	'8528022',	'8528058',	'8528071',	'8528073',	'8528105',	'8528106',	'8528122',	'8528148',	'8528170',	'8528171',	'8528193',	'8528196',	'8528208',	'8528213',	'8528225',	'8528243',	'8528245',	'8528283',	'8528285',	'8528392',	'8528482',	'8528485',	'8528557',	'8528560',	'8528585',	'8528587',	'8528622',	'8528672',	'8528718',	'8528720',	'8528724',	'8528726',	'8528762',	'8528765',	'8528766',	'8528792',	'8528830',	'8528836',	'8528859',	'8528860',	'8528869',	'8528882',	'8528916',	'8528944',	'8528946',	'8528968',	'8528994',	'8528997',	'8528998',	'8529010',	'8529030',	'8529539',	'8531977',	'8532991',	'8532995',	'8533877',	'8535562',	'8535582',	'8535586',	'8535596',	'8535606',	'8536047',	'8536051',	'8536058',	'8536066',	'8536856',	'8537102',	'8537846',	'8537849',	'8537861',	'8537888',	'8538083',	'8538087',	'8538093',	'8538130',	'8538137',	'8538156',	'8538164',	'8538209',	'8539006',	'8539546',	'8539554',	'8541999',	'8542003',	'8542787',	'8542791',	'8542797',	'8542850',	'8542879',	'8542883',	'8542886',	'8542888',	'8542891',	'8542905',	'8542906',	'8545852',	'8545863',	'8547719',	'8547720',	'8547727',	'8547729',	'8547759',	'8549954',	'8550019',	'8550022',	'8550539',	'8550541',	'8552812',	'8555988',	'8555992',	'8556017',	'8556020',	'8556030',	'8556032',	'8556040',	'8556043',	'8556057',	'8556065',	'8556140',	'8556191',	'8556235',	'8556236',	'8556247',	'8556292',	'8556297',	'8556309',	'8556330',	'8556334',	'8556348',	'8556372',	'8556379',	'8556411',	'8556413',	'8556416',	'8556427',	'8556453',	'8556455',	'8556467',	'8556469',	'8556530',	'8556548',	'8556550',	'8556551',	'8556553',	'8556581',	'8556631',	'8556639',	'8556691',	'8556693',	'8556718',	'8556749',	'8556789',	'8556814',	'8556835',	'8556837',	'8556862',	'8556915',	'8556917',	'8556926',	'8556934',	'8556935',	'8556941',	'8556964',	'8556967',	'8556970',	'8556980',	'8556981',	'8556984',	'8556995',	'8557000',	'8557011',	'8557019',	'8557059',	'8557100',	'8557129',	'8557138',	'8557140',	'8557144',	'8557185',	'8557186',	'8557191',	'8557208',	'8557225',	'8557269',	'8557278',	'8557279',	'8557283',	'8557287',	'8557320',	'8557373',	'8557376',	'8557427',	'8557434',	'8557441',	'8557445',	'8557452',	'8557467',	'8557484',	'8558417',	'8558419',	'8564191',	'8564353',	'8564415',	'8564419',	'8564497',	'8564535',	'8564578',	'8564594',	'8564711',	'8564716',	'8564718',	'8564754',	'8564756',	'8564765',	'8564781',	'8564783',	'8564843',	'8564844',	'8564910',	'8564921',	'8564964',	'8564969',	'8564971',	'8564972',	'8564975',	'8564996',	'8565025',	'8565027',	'8565079',	'8565082',	'8565084',	'8565093',	'8565101',	'8565103',	'8565143',	'8565154',	'8565156',	'8565180',	'8565182',	'8565196',	'8565200',	'8565224',	'8565225',	'8567353',	'8567354',	'8568047',	'8568049',	'8571102',	'8571140',	'8572698',	'8572702',	'8572704',	'8572710',	'8572793',	'8572798',	'8572906',	'8572912',	'8574922',	'8574923',	'8574924',	'8574933',	'8574935',	'8574944',	'8574948',	'8574957',	'8574998',	'8575033',	'8575085',	'8575089',	'8575116',	'8575118',	'8575177',	'8575255',	'8575256',	'8575635',	'8575638',	'8575674',	'8576212',	'8576879',	'8577036',	'8577067',	'8577069',	'8577120',	'8577139',	'8577163',	'8577165',	'8577212',	'8577220',	'8577227',	'8577281',	'8577402',	'8577404',	'8577457',	'8577481',	'8577484',	'8577523',	'8577598',	'8577601',	'8577797',	'8577834',	'8577836',	'8577865',	'8577868',	'8577926',	'8577928',	'8577985',	'8578042',	'8578048',	'8578205',	'8578254',	'8578256',	'8578268',	'8578278',	'8578279',	'8578300',	'8578303',	'8578314',	'8578324',	'8578333',	'8578337',	'8578365',	'8578366',	'8578367',	'8578373',	'8578374',	'8578376',	'8578389',	'8578406',	'8578449',	'8578450',	'8578468',	'8578469',	'8578470',	'8578471',	'8578493',	'8578497',	'8578498',	'8578544',	'8578545',	'8578546',	'8578549',	'8578559',	'8578573',	'8578610',	'8578620',	'8578622',	'8578642',	'8578660',	'8578681',	'8578683',	'8578685',	'8578688',	'8578690',	'8578697',	'8578701',	'8578704',	'8578716',	'8578719',	'8578724',	'8578732',	'8578733',	'8578734',	'8578761',	'8578800',	'8578824',	'8578828',	'8578852',	'8578856',	'8579212',	'8581951',	'8583716',	'8583745',	'8583749',	'8583814',	'8583823',	'8583825',	'8583841',	'8583844',	'8583849',	'8583864',	'8583885',	'8584013',	'8584015',	'8584077',	'8584079',	'8584141',	'8584183',	'8584186',	'8584214',	'8584217',	'8584219',	'8584249',	'8584255',	'8584276',	'8584279',	'8584323',	'8584325',	'8584395',	'8584448',	'8584518',	'8584520',	'8584523',	'8584545',	'8584551',	'8584555',	'8584567',	'8584570',	'8585327',	'8585332',	'8586981',	'8586985',	'8587731',	'8587732',	'8589510',	'8589515',	'8589519',	'8589966',	'8589967',	'8589968',	'8589969',	'8589970',	'8593764',	'8593768',	'8593772',	'8600109',	'8600110',	'8600128',	'8603227',	'8603233',	'8606873',	'8606876',	'8606877',	'8628170',	'8628173',	'8628241',	'8628243',	'8628271',	'8628325',	'8628340',	'8628354',	'8628417',	'8628419',	'8628442',	'8628444',	'8628503',	'8628505',	'8628538',	'8628542',	'8628595',	'8628597',	'8628622',	'8628624',	'8628651',	'8628671',	'8628674',	'8628676',	'8628688',	'8628751',	'8628752',	'8628767',	'8628812',	'8628871',	'8628884',	'8628934',	'8628938',	'8628959',	'8628972',	'8628975',	'8628995',	'8628996',	'8629047',	'8629066',	'8629164',	'8629184',	'8629185',	'8629262',	'8629269',	'8629271',	'8629274',	'8629305',	'8629308',	'8629369',	'8629380',	'8629398',	'8629399',	'8629488',	'8629491',	'8629520',	'8629523',	'8629525',	'8629526',	'8629530',	'8629535',	'8629538',	'8629539',	'8629540',	'8629541',	'8629546',	'8629559',	'8629583',	'8629597',	'8629609',	'8629611',	'8629613',	'8629615',	'8629618',	'8629629',	'8629634',	'8629638',	'8629661',	'8629667',	'8629670',	'8629742',	'8629743',	'8629747',	'8630240',	'8630242',	'8630245',	'8632250',	'8633403',	'8634062',	'8634808',	'8634823',	'8635700',	'8635719',	'8635888',	'8636423',	'8636425',	'8636432',	'8636452',	'8636454',	'8636461',	'8636473',	'8637654',	'8637655',	'8637670',	'8638290',	'8638291',	'8638293',	'8638296',	'8638298',	'8638320',	'8638321',	'8638322',	'8638323',	'8638328',	'8638358',	'8638361',	'8638483',	'8638486',	'8638488',	'8638495',	'8638497',	'8638499',	'8638540',	'8638570',	'8638625',	'8638685',	'8638691',	'8638696',	'8638741',	'8638753',	'8638756',	'8638782',	'8638784',	'8638799',	'8638808',	'8638868',	'8638870',	'8638903',	'8638977',	'8638978',	'8639019',	'8639060',	'8639061',	'8639075',	'8639226',	'8639296',	'8639319',	'8639333',	'8639365',	'8639368',	'8639372',	'8639604',	'8639714',	'8640099',	'8640101',	'8640103',	'8642027',	'8642031',	'8642042',	'8642782',	'8643784',	'8643785',	'8643790',	'8646480',	'8646923',	'8646924',	'8655960',	'8657212',	'8657235',	'8657277',	'8657280',	'8657293',	'8657343',	'8657345',	'8657364',	'8657369',	'8657398',	'8657403',	'8657427',	'8657442',	'8657473',	'8657476',	'8657477',	'8657519',	'8657534',	'8657535',	'8657550',	'8657551',	'8657554',	'8657578',	'8657579',	'8657655',	'8657660',	'8657681',	'8657683',	'8657717',	'8657848',	'8657858',	'8657896',	'8657928',	'8657971',	'8657974',	'8657990',	'8657993',	'8658005',	'8658014',	'8658022',	'8658037',	'8658040',	'8658062',	'8658191',	'8658194',	'8658201',	'8658223',	'8658236',	'8658254',	'8658255',	'8658275',	'8658276',	'8658301',	'8658330',	'8658333',	'8658367',	'8658368',	'8658371',	'8658384',	'8658386',	'8660608',	'8660657',	'8660663',	'8660667',	'8660668',	'8660707',	'8661336',	'8661343',	'8661811',	'8662378',	'8662382',	'8662387',	'8662391',	'8662593',	'8662594',	'8662598',	'8662601',	'8662602',	'8662603',	'8662607',	'8662610',	'8662679',	'8662682',	'8662707',	'8662733',	'8662753',	'8662759',	'8662832',	'8662840',	'8662881',	'8662894',	'8662896',	'8662953',	'8662969',	'8662975',	'8662980',	'8662984',	'8662993',	'8663010',	'8663011',	'8663033',	'8663267',	'8663269',	'8663271',	'8663298',	'8663314',	'8663365',	'8663366',	'8663435',	'8663438',	'8663488',	'8663549',	'8663550',	'8663552',	'8663560',	'8663573',	'8663575',	'8663596',	'8663600',	'8663612',	'8663630',	'8663635',	'8663649',	'8663650',	'8663703',	'8663742',	'8663743',	'8665331',	'8665332',	'8665333',	'8665334',	'8665879',	'8665890',	'8665891',	'8665944',	'8665946',	'8666012',	'8666019',	'8666023',	'8666032',	'8666138',	'8666258',	'8666368',	'8666429',	'8666604',	'8666615',	'8666617',	'8666672',	'8666755',	'8666792',	'8666807',	'8666835',	'8666837',	'8666872',	'8666877',	'8666888',	'8666890',	'8666898',	'8666916',	'8666919',	'8666925',	'8666961',	'8666989',	'8667006',	'8667061',	'8667067',	'8667081',	'8667177',	'8667179',	'8667185',	'8667200',	'8667204',	'8667281',	'8667290',	'8667320',	'8667333',	'8667344',	'8667345',	'8667346',	'8667365',	'8667369',	'8667372',	'8667378',	'8667379',	'8667383',	'8667390',	'8667403',	'8667405',	'8667406',	'8667410',	'8667421',	'8667428',	'8667429',	'8667433',	'8667435',	'8667437',	'8667438',	'8667496',	'8667505',	'8667612',	'8667618',	'8668477',	'8668643',	'8671940',	'8671949',	'8671952',	'8672345',	'8672354',	'8672367',	'8672371',	'8672386',	'8672393',	'8672395',	'8672398',	'8673783',	'8673784',	'8673786',	'8673787',	'8673790',	'8673796',	'8673797',	'8673866',	'8673888',	'8673959',	'8673977',	'8673996',	'8674000',	'8674023',	'8674028',	'8674033',	'8674064',	'8674065',	'8674066',	'8674099',	'8674100',	'8674121',	'8674139',	'8674140',	'8674142',	'8674150',	'8674188',	'8674211',	'8674214',	'8674227',	'8674228',	'8674265',	'8674273',	'8674276',	'8674280',	'8674295',	'8674332',	'8674346',	'8674349',	'8674355',	'8674396',	'8674397',	'8674421',	'8674424',	'8674429',	'8674467',	'8674468',	'8674582',	'8674583',	'8674584',	'8674586',	'8674599',	'8674601',	'8674604',	'8674661',	'8674679',	'8674682',	'8674725',	'8674727',	'8674755',	'8674779',	'8674799',	'8674802',	'8674807',	'8674844',	'8674846',	'8674887',	'8674890',	'8674927',	'8674930',	'8674936',	'8674973',	'8674974',	'8675018',	'8675036',	'8675037',	'8675049',	'8675057',	'8675058',	'8675059',	'8675061',	'8675110',	'8675134',	'8675137',	'8675139',	'8675155',	'8675157',	'8675163',	'8675171',	'8675174',	'8675187',	'8675209',	'8675231',	'8675866',	'8675869',	'8675870',	'8675877',	'8682942',	'8682947',	'8682974',	'8682987',	'8683144',	'8683180',	'8683189',	'8683215',	'8683239',	'8683291',	'8683303',	'8683426',	'8683491',	'8683511',	'8683515',	'8683553',	'8683558',	'8683560',	'8683607',	'8683609',	'8683611',	'8683615',	'8683662',	'8683674',	'8683698',	'8683747',	'8683752',	'8683760',	'8683781',	'8683839',	'8683841',	'8683924',	'8683927',	'8683949',	'8683953',	'8683993',	'8683995',	'8684004',	'8684006',	'8684044',	'8684046',	'8684072',	'8684087',	'8684097',	'8684099',	'8684151',	'8684154',	'8684158',	'8684165',	'8684179',	'8684184',	'8684203',	'8684213',	'8684215',	'8684219',	'8684239',	'8684242',	'8684249',	'8684257',	'8684341',	'8684342',	'8684386',	'8684389',	'8684410',	'8684412',	'8684453',	'8684468',	'8685037',	'8685042',	'8685050',	'8685720',	'8685724',	'8688440',	'8688441',	'8692009',	'8692011',	'8692012'
		)
	/**
	Vége
	**/

	UPDATE [landing].[MedsolEmsReceipt]
	SET
		[ErrorLevel] = 1,
		[ErrorLevelClinic] = 2,
		[ErrorDescription] = ISNULL([ErrorDescription], '') + 'Klinika: cannot be NULL' + CHAR(10) + CHAR(13)
	WHERE
		[Landing_Klinika] IS NULL

	UPDATE [landing].[MedsolEmsReceipt]
	SET
		[ErrorLevel] = 1,
		[ErrorLevelClinic] = 2,
		[ErrorDescription] = ISNULL([ErrorDescription], '') + 'Klinika: length greater than 2' + CHAR(10) + CHAR(13)
	WHERE
		[Landing_Klinika] IS NOT NULL AND
		LEN( TRIM([Landing_Klinika]) ) > 2

	UPDATE [landing].[MedsolEmsReceipt]
	SET
		[ErrorLevel] = 1,
		[ErrorLevelClinic] = 2,
		[ErrorDescription] = ISNULL([ErrorDescription], '') + 'Klinika neve: length greater than 256' + CHAR(10) + CHAR(13)
	WHERE
		[Landing_Klinika neve] IS NOT NULL AND
		LEN( TRIM([Landing_Klinika neve]) ) > 256

	UPDATE [landing].[MedsolEmsReceipt]
	SET
		[ErrorLevel] = 1,
		[ErrorLevelClinic] = 2,
		[ErrorDescription] = ISNULL([ErrorDescription], '') + 'Oszt.: length greater than 20' + CHAR(10) + CHAR(13)
	WHERE
		[Landing_Oszt.] IS NOT NULL AND
		LEN( TRIM([Landing_Oszt.]) ) > 20

	UPDATE [landing].[MedsolEmsReceipt]
	SET
		[ErrorLevel] = 1,
		[ErrorLevelClinic] = 2,
		[ErrorDescription] = ISNULL([ErrorDescription], '') + 'Osztály típus: length greater than 100' + CHAR(10) + CHAR(13)
	WHERE
		[Landing_Osztály típus] IS NOT NULL AND
		LEN( TRIM([Landing_Osztály típus]) ) > 100

	UPDATE [landing].[MedsolEmsReceipt]
	SET
		[ErrorLevel] = 1,
		[ErrorLevelDoctor] = 2,
		[ErrorLevelClinicPrescriptions] = 2,
		[ErrorDescription] = ISNULL([ErrorDescription], '') + 'Felíró orvos: cannot be NULL' + CHAR(10) + CHAR(13)
	WHERE
		[Landing_Felíró orvos] IS NULL

	UPDATE [landing].[MedsolEmsReceipt]
	SET
		[ErrorLevel] = 1,
		[ErrorLevelDoctor] = 2,
		[ErrorLevelClinicPrescriptions] = 2,
		[ErrorDescription] = ISNULL([ErrorDescription], '') + 'Felíró orvos: length greater than 5' + CHAR(10) + CHAR(13)
	WHERE
		[Landing_Felíró orvos] IS NOT NULL AND
		LEN( TRIM([Landing_Felíró orvos]) ) > 5

	UPDATE [landing].[MedsolEmsReceipt]
	SET
		[ErrorLevel] = 1,
		[ErrorLevelClinicPrescriptions] = 2,
		[ErrorLevelProduct] = 2,
		[ErrorDescription] = ISNULL([ErrorDescription], '') + 'TTT kód: length greater than 9' + CHAR(10) + CHAR(13)
	WHERE
		[Landing_TTT kód] IS NOT NULL AND
		LEN(TRIM([Landing_TTT kód])) > 9
	
	UPDATE [landing].[MedsolEmsReceipt]
	SET
		[ErrorLevel] = 1,
		[ErrorLevelClinicPrescriptions] = 2,
		[ErrorDescription] = ISNULL([ErrorDescription], '') + 'Felírás dát.: cannot be NULL' + CHAR(10) + CHAR(13)
	WHERE
		[Landing_Felírás dát.] IS NULL

	UPDATE [landing].[MedsolEmsReceipt]
	SET
		[ErrorLevel] = 1,
		[ErrorLevelClinicPrescriptions] = 2,
		[ErrorDescription] = ISNULL([ErrorDescription], '') + 'Felírás dát.: unable to cast date' + CHAR(10) + CHAR(13)
	WHERE
		[Landing_Felírás dát.] IS NOT NULL AND
		TRY_CAST( [Landing_Felírás dát.] AS DATE ) IS NULL

	UPDATE [landing].[MedsolEmsReceipt]
	SET
		[ErrorLevel] = 1,
		[ErrorLevelClinicPrescriptions] = 1,
		[ErrorDescription] = ISNULL([ErrorDescription], '') + 'Menny.: unable to cast decimal(18,3)' + CHAR(10) + CHAR(13)
	WHERE
		[Landing_Menny.] IS NOT NULL AND
		TRY_CAST( [Landing_Menny.] AS DECIMAL(18,3) ) IS NULL

	UPDATE [landing].[MedsolEmsReceipt]
	SET
		[ErrorLevel] = 1,
		[ErrorLevelClinicPrescriptions] = 1,
		[ErrorDescription] = ISNULL([ErrorDescription], '') + 'eMS recept az.: unable to cast int' + CHAR(10) + CHAR(13)
	WHERE
		[Landing_eMS recept az.] IS NOT NULL AND
		TRY_CAST( [Landing_eMS recept az.] AS INT ) IS NULL
			
	UPDATE l
	SET
		[ErrorLevel] = 1,
		[ErrorLevelClinicPrescriptions] = 2,
		[ErrorDescription] = ISNULL([ErrorDescription], '') + 'eMS recept az.: duplicated row' + CHAR(10) + CHAR(13)
	FROM
		[landing].[MedsolEmsReceipt] l
		INNER JOIN 
		(
			SELECT
				[RowId],
				[Landing_eMS recept az.],
				ROW_NUMBER() OVER (PARTITION BY [Landing_eMS recept az.] ORDER BY [RowId]) AS [Duplicate]
			FROM
				[landing].[MedsolEmsReceipt]
		)d ON d.[RowId] = l.[RowId]
	WHERE
		ISNULL(l.[ErrorLevelClinicPrescriptions], 0) < 2 AND
		d.[Duplicate] > 1

	UPDATE [landing].[MedsolEmsReceipt]
	SET
		[ErrorLevel] = 1,
		[ErrorLevelProduct] = 1,
		[ErrorDescription] = ISNULL([ErrorDescription], '') + 'Menny.egys.: length greater than 256' + CHAR(10) + CHAR(13)
	WHERE
		[Landing_Menny.egys.] IS NOT NULL AND
		LEN( [Landing_Menny.egys.])  > 256

	
	UPDATE l SET
		l.[ClinicID] = TRY_CAST(TRIM([Landing_Klinika]) AS CHAR(2)),
		l.[ClinicName] = TRY_CAST(TRIM([Landing_Klinika neve]) AS NVARCHAR(256)),
		l.[ClinicDepartmentID] = TRY_CAST(TRIM([Landing_Oszt.]) AS NVARCHAR(20)),
		l.[ClinicDepartmentName] = TRY_CAST(TRIM([Landing_Osztály típus]) AS NVARCHAR(100)),
		l.[DoctorID] = TRY_CAST(TRIM([Landing_Felíró orvos]) AS CHAR(5)),
		l.[EMSPrescriptionID] = TRY_CAST(TRIM([Landing_eMS recept az.]) AS INT),
		l.[PrescriptionDate] = TRY_CAST(TRIM([Landing_Felírás dát.]) AS DATE),
		l.[Quantity] = TRY_CAST(TRIM([Landing_Menny.]) AS INT),
		l.[ProductTTTID] = TRY_CAST(TRIM([Landing_TTT kód]) AS NVARCHAR(9)),
		l.[ProductMedsolName] = TRY_CAST(TRIM([Landing_Készítmény neve]) AS NVARCHAR(256)),
		l.[PrescriptionUnit] = TRY_CAST(TRIM([Landing_Menny.egys.]) AS NVARCHAR(256)),
		l.[ErrorLevel] = ISNULL(l.[ErrorLevel], 0),
		l.[ErrorLevelClinic] = ISNULL(l.[ErrorLevelClinic], 0),
		l.[ErrorLevelDoctor] = ISNULL(l.[ErrorLevelDoctor], 0),
		l.[ErrorLevelProduct] = ISNULL(l.[ErrorLevelProduct], 0),
		l.[ErrorLevelClinicPrescriptions] = ISNULL(l.[ErrorLevelClinicPrescriptions],0)
	FROM
		[landing].[MedsolEmsReceipt] l
		
	UPDATE [landing].[MedsolEmsReceipt] SET
		[RowHash] = [etl].[udf_GetHash_15]( 
			[Landing_eMS recept az.],
			[Landing_eRecept / eVény azon.],
			[Landing_Klinika],
			[Landing_Klinika neve],
			[Landing_Oszt.],
			[Landing_Osztály típus],
			[Landing_Felíró orvos],
			[Landing_Felírás dát.],
			[Landing_ATC kód],
			[Landing_TTT kód],
			[Landing_Támogatási kat],
			[Landing_Készítmény neve],
			[Landing_Menny.egys.],
			[Landing_Menny.],
			[Landing_BNO]
			),
		[RowHashClinic] = [etl].[udf_GetHash_04]( 
			[Landing_Klinika],
			[Landing_Klinika neve],
			[Landing_Oszt.],
			[Landing_Osztály típus]
		),
		[RowHashClinicPrescriptions] = [etl].[udf_GetHash_10]( 
			[Landing_eMS recept az.],
			[Landing_eRecept / eVény azon.],
			[Landing_Klinika],
			[Landing_Klinika neve],
			[Landing_Oszt.],
			[Landing_Osztály típus],
			[Landing_Felíró orvos],
			[Landing_Felírás dát.],
			[Landing_TTT kód],
			[Landing_Menny.]
		)

		-- Szétszedjük az összefűzött vény azonosítokat
		INSERT INTO @PRESCRIPTION ( [MedsolEmsReceiptRowId], [PrescriptionIDValue], [PrescriptionID] )
		SELECT 
			l.[RowId],
			v.[value],
			TRY_CAST( v.[value] AS BIGINT )
		FROM
			[landing].[MedsolEmsReceipt] l
			CROSS APPLY [etl].[udf_SplitIds] ( l.[Landing_eRecept / eVény azon.], ',') v
		WHERE
			l.[ErrorLevelClinicPrescriptions] < 2 AND
			LEN(TRIM(ISNULL(l.[Landing_eRecept / eVény azon.], ''))) > 0

		-- Megjelöljük a hibás vényazonosítokat
		UPDATE l SET 
			[ErrorLevel] = 1,
			[ErrorLevelClinicPrescriptions] = 1,
			[ErrorDescription] = ISNULL([ErrorDescription], '') + 'eRecept / eVény azon.: unable to cast bigint' + CHAR(10) + CHAR(13)
	
		FROM
			[landing].[MedsolEmsReceipt] l
			INNER JOIN @PRESCRIPTION p ON
				p.MedsolEmsReceiptRowId = l.RowId
		WHERE
			p.PrescriptionIDValue IS NOT NULL AND 
			p.PrescriptionID IS NULL

		INSERT INTO @TMPPRODUCT ( [ProductTTTID], [ProductMedsolName], [PrescriptionUnit], [ImportFileId], [MaxPrescriptionDate], [MinPrescriptionDate], [RowHashProduct] )
		SELECT
			t.[ProductTTTID],
			t.[ProductMedsolName],
			t.[PrescriptionUnit],
			t.[ImportFileId],
			t.[MaxPrescriptionDate],
			t.[MinPrescriptionDate],
			t.[RowHashProduct]
		FROM
		(
			SELECT
				g.[ProductTTTID],
				g.[ProductMedsolName],
				g.[PrescriptionUnit],
				g.[ImportFileId],				
				g.[MaxPrescriptionDate],
				g.[MinPrescriptionDate],
				[etl].[udf_GetHash_05](
					g.[ProductTTTID],
					g.[ProductMedsolName],
					g.[PrescriptionUnit],
					g.[MaxPrescriptionDate],	
					g.[MinPrescriptionDate]) AS [RowHashProduct]
			FROM
				(
		
					SELECT 
						l.[ProductTTTID], 
						l.[ProductMedsolName],
						l.[PrescriptionUnit],
						MIN(l.[ImportFileId]) AS [ImportFileId],						
						MAX(l.[PrescriptionDate]) AS [MaxPrescriptionDate],
						MIN(l.[PrescriptionDate]) AS [MinPrescriptionDate]
					FROM
						[landing].[MedsolEmsReceipt] l
					GROUP BY
						[ProductTTTID], [ProductMedsolName], [PrescriptionUnit]
				)g
			)t

		UPDATE l SET
			l.[RowHashProduct] = p.[RowHashProduct]
		FROM
			[landing].[MedsolEmsReceipt] l
			INNER JOIN @TMPPRODUCT p ON
				l.[ProductTTTID] = p.[ProductTTTID] AND
				l.[ProductMedsolName] = p.[ProductMedsolName]
				

	BEGIN TRAN;

		/*
			[dm].[DimDoctor] töltése SCD1
		*/
		INSERT INTO [dm].[DimDoctor] ( [DoctorID], [ImportFileId], [ETLSessionID]  )
		SELECT
			l.[DoctorID], 
			l.[ImportFileId],
			@ETLSESSIONID
		FROM
			(
				SELECT 
					[DoctorID], MIN( ImportFileId ) AS ImportFileId
				FROM
					[landing].[MedsolEmsReceipt]
				WHERE
					[ErrorLevelDoctor] < 2
				GROUP BY 
					[DoctorID]
			)l
			LEFT JOIN [dm].[DimDoctor] d ON d.[DoctorID] = l.[DoctorID]
		WHERE
			d.[DoctorKey] IS NULL


		/*
			[dm].[DimClinic] töltése SCD1
		*/
		INSERT INTO [dm].[DimClinic]
		(
			[ClinicID], 
			[ClinicName], 
			[ClinicControllingID], 
			[ClinicDepartmentID],
			[ClinicDepartmentName], 
			[RowHash],
			[ImportFileId], 
			[ETLSessionID]
		)
		SELECT
			L.[ClinicID], 
			L.[ClinicName], 
			L.[ControllingKey], 
			L.[ClinicDepartmentID],
			L.[ClinicDepartmentName], 
			L.[RowHash],
			L.[ImportFileId],
			@ETLSESSIONID
		FROM
			(
				SELECT 
						l.[ClinicID], 
						l.[ClinicName], 
						dcc.[ControllingKey], 
						l.[ClinicDepartmentID], 
						l.[ClinicDepartmentName],						
						MIN( l.[RowHashClinic] ) AS [RowHash],
						MIN( l.[ImportFileId] ) AS [ImportFileId]
					FROM
						[landing].[MedsolEmsReceipt] l 
						LEFT JOIN [dm].[DimClinicControlling] dcc ON
							dcc.[ClinicID] = l.[ClinicID]
					WHERE
						l.[ErrorLevelClinic] < 2
					GROUP BY
						l.[ClinicID], l.[ClinicName], dcc.[ControllingKey], l.[ClinicDepartmentID], l.[ClinicDepartmentName]
			)L
			LEFT JOIN [dm].[DimClinic] d ON d.[RowHash] = L.[RowHash]
		WHERE
			d.[RowHash] IS NULL

		/*
			[dm].[DimProductMedsol] töltése SCD 4
		*/
		
		MERGE [dm].[DimProductMedsol] AS TARGET
		USING @TMPPRODUCT AS SOURCE
		ON 
		(
			SOURCE.[ProductTTTID] = TARGET.[ProductTTTID] AND
			SOURCE.[ProductMedsolName] = TARGET.[ProductMedsolName] AND
			SOURCE.[PrescriptionUnit] = TARGET.[PrescriptionUnit]
		)
		-- INSERT
		WHEN NOT MATCHED BY TARGET
		   THEN INSERT
		   (
				[ProductTTTID],
				[ProductMedsolName],
				[PrescriptionUnit],
				[MaxPrescriptionDate],
				[MinPrescriptionDate],
				[RowHash],
				[ImportFileId],
				[ETLSessionID]
		   )
		   VALUES
		   (				
				SOURCE.[ProductTTTID],
				SOURCE.[ProductMedsolName],
				SOURCE.[PrescriptionUnit],
				SOURCE.[MaxPrescriptionDate],
				SOURCE.[MinPrescriptionDate],
				SOURCE.[RowHashProduct],
				SOURCE.[ImportFileId],
				@ETLSESSIONID
		   )

		   -- UPDATE
		WHEN MATCHED AND SOURCE.[RowHashProduct] <> TARGET.[RowHash]
			THEN UPDATE SET
		    TARGET.[MaxPrescriptionDate]	= IIF( SOURCE.[MaxPrescriptionDate] > TARGET.[MaxPrescriptionDate], SOURCE.[MaxPrescriptionDate], TARGET.[MaxPrescriptionDate]),
			TARGET.[MinPrescriptionDate]	= IIF( SOURCE.[MinPrescriptionDate] < TARGET.[MinPrescriptionDate], SOURCE.[MinPrescriptionDate], TARGET.[MinPrescriptionDate]),
			TARGET.[RowHash]				= SOURCE.[RowHashProduct],
			TARGET.[ImportFileId]			= SOURCE.[ImportFileId],
			TARGET.[EtlSessionId]			= @ETLSESSIONID
						
		/*
		Az update és törlés itt nem kivitelezhető mivel nem FULL EXTRACT-ot kapunk és az időszak sem beazonosítható
		*/
		-- DELETE
		--WHEN NOT MATCHED BY Source THEN
		--	DELETE
		OUTPUT 
			deleted.[ProductMedsolKey],
			deleted.[ProductTTTID],
			deleted.[ProductMedsolName],
			deleted.[PrescriptionUnit],
			deleted.[MaxPrescriptionDate],
			deleted.[MinPrescriptionDate],
			deleted.[RowHash],
			deleted.[ImportFileId],
			deleted.[EtlSessionId],
			$action as ActionType
		INTO @HSTPRODUCTMEDSOL;
		

		INSERT INTO [hst].[DimProductMedsol]
		(
			[ProductMedsolKey],
			[ProductTTTID],
			[ProductMedsolName],
			[PrescriptionUnit],
			[MaxPrescriptionDate],
			[MinPrescriptionDate],
			[RowHash],
			[ImportFileId],
			[ETLSessionID],
			[ActionType],
			[ActionEtlSessionId],
			[ActionFields]
		)
		SELECT  
			h.[ProductMedsolKey],
			h.[ProductTTTID],
			h.[ProductMedsolName],
			h.[PrescriptionUnit],
			h.[MaxPrescriptionDate],
			h.[MinPrescriptionDate],
			h.[RowHash],
			h.[ImportFileId],
			h.[EtlSessionId],
		   CASE WHEN h.[ActionType] = 'UPDATE' THEN 1 ELSE 2 END,
		   @ETLSESSIONID,
		   CASE WHEN h.[ActionType] = 'UPDATE' THEN
				   IIF( ISNULL( h.[ProductTTTID], '') <> ISNULL( t.[ProductTTTID], ''), '[ProductTTTID]: ' + ISNULL(h.[ProductTTTID], 'NULL') + ' -> ' +  ISNULL( t.[ProductTTTID], 'NULL')  + ' ' + CHAR(13), '' ) +
				   IIF( ISNULL( h.[MaxPrescriptionDate], '1900-01-01') <> ISNULL( t.[MaxPrescriptionDate], '1900-01-01'), '[MaxPrescriptionDate]: ' + ISNULL(CONVERT(NVARCHAR, h.[MaxPrescriptionDate], 120), 'NULL')  + ' -> ' +  ISNULL(CONVERT(NVARCHAR, t.[MaxPrescriptionDate], 120), 'NULL')  + ' ' + CHAR(13), '' ) +
				   IIF( ISNULL( h.[MinPrescriptionDate], '1900-01-01') <> ISNULL( t.[MinPrescriptionDate], '1900-01-01'), '[MinPrescriptionDate]: ' + ISNULL(CONVERT(NVARCHAR, h.[MinPrescriptionDate], 120), 'NULL')  + ' -> ' +  ISNULL(CONVERT(NVARCHAR, t.[MinPrescriptionDate], 120), 'NULL')  + ' ' + CHAR(13), '' ) +
				   IIF( ISNULL( h.[PrescriptionUnit], '') <> ISNULL( t.[PrescriptionUnit], ''), '[PrescriptionUnit]: ' + ISNULL(h.[PrescriptionUnit], 'NULL') + ' -> ' +  ISNULL( t.[PrescriptionUnit], 'NULL')  + ' ' + CHAR(13), '' ) +
				   IIF( ISNULL( h.[ProductMedsolName], '') <> ISNULL( t.[ProductMedsolName], ''), '[ProductMedsolName]: ' + ISNULL(h.[ProductMedsolName], 'NULL') + ' -> ' +  ISNULL( t.[ProductMedsolName], 'NULL'), '')
			ELSE NULL END
		FROM 
			@HSTPRODUCTMEDSOL h
			LEFT JOIN @TMPPRODUCT t on 
				t.[RowHashProduct] = h.[RowHash]
		WHERE 
			h.ActionType <> 'INSERT';
		
								
		/*
			FK-k töltése
		*/
		UPDATE l SET
			[ClinicKey] = d.[ClinicKey]
		FROM
			[landing].[MedsolEmsReceipt] l
			INNER JOIN [dm].[DimClinic] d ON
				d.[ClinicID] = l.[ClinicID]

		UPDATE l SET
			[DoctorKey] = d.[DoctorKey]
		FROM
			[landing].[MedsolEmsReceipt] l
			INNER JOIN [dm].[DimDoctor] d ON
				d.[DoctorID] = l.[DoctorID]

		UPDATE l SET
			[PrescriptionDateKey] = d.[DateKey]
		FROM
			[landing].[MedsolEmsReceipt] l
			INNER JOIN [dm].[DimDate] d ON
				d.[Date] = l.[PrescriptionDate]

		UPDATE l SET
			[PharmacyProductKey] = d.[ProductMedsolKey]
		FROM
			[landing].[MedsolEmsReceipt] l
			INNER JOIN [dm].[DimProductMedsol] d ON
				d.[ProductTTTID] = l.[ProductTTTID] AND
				d.[ProductMedsolName] = l.[ProductMedsolName]AND
				d.[PrescriptionUnit] = l.[PrescriptionUnit]
				

		-- TODO utólagos hiba!
		UPDATE [landing].[MedsolEmsReceipt] SET
			[ErrorLevelClinicPrescriptions] = 2,
			[ErrorLevelProduct] = 2,
			[ErrorDescription] = ISNULL([ErrorDescription], '') + 'PharmacyProductKey: not found' + CHAR(10) + CHAR(13)
		WHERE
			[PharmacyProductKey] IS NULL


		-- Töröljük a korábbi betöltést a forrásállomány neve alapján
		DELETE f
		FROM 
			[dm].[FactClinicPrescriptions] f
		WHERE
			f.[ImportFileId] IN
			(
				SELECT DISTINCT fif.[ImportFileId]
				FROM
					[landing].[MedsolEmsReceipt] l
					INNER JOIN [com].[ImportFile] lif ON
						lif.[ImportFileId] = l.[ImportFileId]
					INNER JOIN [com].[ImportFile] fif ON
						lif.[FileName] = fif.[FileName]
				WHERE	
					l.[ErrorLevelClinicPrescriptions] < 2
			)

		-- Betöltjük
		INSERT INTO [dm].[FactClinicPrescriptions](
				[ClinicKey],
				[DoctorKey],
				[EMSPrescriptionID],
				[PrescriptionID],
				[PharmacyProductKey],
				[PrescriptionDate],
				[Quantity],
				[RowHash],
				[ImportFileId],
				[ETLSessionID])
		SELECT 
				l.[ClinicKey],
				l.[DoctorKey],
				l.[EMSPrescriptionID],
				p.[PrescriptionID],
				l.[PharmacyProductKey],
				l.[PrescriptionDateKey],
				l.[Quantity],
				l.[RowHashClinicPrescriptions],
				l.[ImportFileId],
				@ETLSESSIONID
			FROM
				[landing].[MedsolEmsReceipt] l 				
				LEFT JOIN @PRESCRIPTION p ON
					p.[MedsolEmsReceiptRowId] = l.[RowId]
			WHERE
				l.[ErrorLevelClinicPrescriptions] < 2 AND
				l.[ErrorLevel] < 2
						
	COMMIT TRAN;

	-- ERROR log
	INSERT INTO com.ImportError( [RowNumber], [ImportFileId], [ErrorDescription], [ErrorLevel], [EtlSessionId] )
	SELECT
		l.[RowId] + 1, -- Az első sor a header
		l.[ImportFileId],
		l.[ErrorDescription],
		l.[ErrorLevel],
		@ETLSESSIONID
	FROM
		[landing].[MedsolEmsReceipt] l
	WHERE
		l.[ErrorLevel] > 0

	END TRY

	BEGIN CATCH
			
		ROLLBACK TRANSACTION

		SET @ERROR_MSG = (SELECT 'ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), 'na') + '; ERROR_LINE: ' + ISNULL(CAST(ERROR_LINE() AS NVARCHAR(50)), 'na') + '; ERROR_MESSAGE: ' +  ISNULL(ERROR_MESSAGE(), 'na'))

		EXEC [etl].[usp_LogEvent] 
		@ETLSESSIONID = @ETLSESSIONID,
		@LOGTYPE = 3,
		@COMPONENT = '[etl].[usp_ProcessMedsolEmsReceipt]',
		@DESCRIPTION  = @ERROR_MSG;

		THROW;

	END CATCH
	
	SET @ELAPSED = [etl].[udf_StopWatch] (@START_WATCH)

	EXEC [etl].[usp_LogEvent] 
		@ETLSESSIONID = @ETLSESSIONID,
		@LOGTYPE = 1,
		@COMPONENT = '[etl].[usp_ProcessMedsolEmsReceipt]',
		@DESCRIPTION  = @ELAPSED
		    
